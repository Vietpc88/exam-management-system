import re
import mammoth
import streamlit as st
import pandas as pd
from typing import List, Dict, Any
import io
import base64
from PIL import Image
import json

class WordExamParser:
    """Class ph√¢n t√≠ch ƒë·ªÅ thi t·ª´ file Word v·ªõi √°nh x·∫° h√¨nh ·∫£nh ch√≠nh x√°c"""
    
    def __init__(self):
        self.questions = []
        self.errors = []
        self.warnings = []
        self.images = {}
        self.image_positions = {}  # L∆∞u v·ªã tr√≠ h√¨nh ·∫£nh trong HTML
        self.raw_questions_data = []
    
    def parse_docx_file(self, uploaded_file) -> Dict[str, Any]:
        """Ph√¢n t√≠ch file .docx v·ªõi x·ª≠ l√Ω h√¨nh ·∫£nh ch√≠nh x√°c"""
        try:
            # Reset
            self.questions = []
            self.errors = []
            self.warnings = []
            self.images = {}
            self.image_positions = {}
            self.raw_questions_data = []
            
            # Extract text v√† HTML ƒë·ªÉ l·∫•y c·∫£ h√¨nh ·∫£nh
            raw_result = mammoth.extract_raw_text(uploaded_file)
            text_content = raw_result.value
            
            # Reset file pointer v√† extract HTML v·ªõi h√¨nh ·∫£nh
            uploaded_file.seek(0)
            html_result = mammoth.convert_to_html(
                uploaded_file,
                convert_image=mammoth.images.img_element(self._extract_image_with_position)
            )
            html_content = html_result.value
            
            # Ph√¢n t√≠ch v·ªã tr√≠ h√¨nh ·∫£nh trong HTML
            self._analyze_image_positions(html_content)
            
            # Debug mode
            if st.checkbox("üîç Debug Mode - Xem n·ªôi dung file", key="debug_content"):
                with st.expander("üìù Raw Text Content", expanded=False):
                    st.text_area("Raw text:", text_content, height=200)
                
                with st.expander("üåê HTML Content", expanded=False):
                    st.text_area("HTML:", html_content, height=200)
                
                # Debug h√¨nh ·∫£nh v√† v·ªã tr√≠
                if self.images:
                    with st.expander("üñºÔ∏è Images Found", expanded=False):
                        for img_key, img_data in self.images.items():
                            position_info = self.image_positions.get(img_key, "Kh√¥ng x√°c ƒë·ªãnh")
                            st.write(f"**{img_key}:** {img_data['size']} bytes, {img_data['content_type']}")
                            st.write(f"**V·ªã tr√≠ ∆∞·ªõc t√≠nh:** C√¢u {position_info}")
                            try:
                                img_bytes = base64.b64decode(img_data['data'])
                                img = Image.open(io.BytesIO(img_bytes))
                                st.image(img, caption=f"{img_key} - C√¢u {position_info}", width=200)
                            except Exception as e:
                                st.error(f"L·ªói hi·ªÉn th·ªã {img_key}: {e}")
            
            # Parse theo logic ƒë√£ s·ª≠a l·ªói
            self.questions = self._parse_questions_by_sections(text_content, html_content)
            
            # T·∫°o b·∫£ng d·ªØ li·ªáu chu·∫©n
            self._create_questions_dataframe()
            
            return {
                'success': True,
                'questions': self.questions,
                'raw_data': self.raw_questions_data,
                'errors': self.errors,
                'warnings': self.warnings,
                'total_questions': len(self.questions),
                'images_found': len(self.images)
            }
            
        except Exception as e:
            self.errors.append(f"L·ªói h·ªá th·ªëng khi ph√¢n t√≠ch file: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'questions': [],
                'raw_data': [],
                'errors': self.errors,
                'warnings': [],
                'total_questions': 0,
                'images_found': 0
            }
    
    def _extract_image_with_position(self, image):
        """Extract h√¨nh ·∫£nh v√† ghi nh·∫≠n v·ªã tr√≠ xu·∫•t hi·ªán"""
        try:
            image_filename = f"image_{len(self.images)}"
            with image.open() as image_stream:
                image_bytes = image_stream.read()
            image_data = base64.b64encode(image_bytes).decode('ascii')
            
            self.images[image_filename] = {
                'data': image_data,
                'content_type': image.content_type,
                'alt_text': getattr(image, 'alt_text', ''),
                'size': len(image_bytes)
            }
            
            return {
                "src": image_filename,
                "alt": getattr(image, 'alt_text', f'Image {len(self.images)}')
            }
            
        except Exception as e:
            error_msg = f"Kh√¥ng th·ªÉ extract h√¨nh ·∫£nh: {str(e)}"
            self.warnings.append(error_msg)
            return {"src": "", "alt": "image-error"}
    
    def _analyze_image_positions(self, html_content: str):
        """Ph√¢n t√≠ch v·ªã tr√≠ h√¨nh ·∫£nh trong HTML ƒë·ªÉ √°nh x·∫° v·ªõi c√¢u h·ªèi"""
        try:
            # T√¨m t·∫•t c·∫£ c√°c v·ªã tr√≠ xu·∫•t hi·ªán c·ªßa "C√¢u X." trong HTML
            question_pattern = r'C√¢u\s+(\d+)\.'
            question_matches = list(re.finditer(question_pattern, html_content, re.IGNORECASE))
            
            # T√¨m t·∫•t c·∫£ c√°c v·ªã tr√≠ h√¨nh ·∫£nh trong HTML
            image_pattern = r'<img[^>]+src="(image_\d+)"'
            image_matches = list(re.finditer(image_pattern, html_content))
            
            # √Ånh x·∫° m·ªói h√¨nh ·∫£nh v·ªõi c√¢u h·ªèi g·∫ßn nh·∫•t tr∆∞·ªõc n√≥
            for img_match in image_matches:
                img_position = img_match.start()
                img_filename = img_match.group(1)
                
                # T√¨m c√¢u h·ªèi g·∫ßn nh·∫•t tr∆∞·ªõc v·ªã tr√≠ h√¨nh ·∫£nh
                closest_question = None
                min_distance = float('inf')
                
                for q_match in question_matches:
                    q_position = q_match.start()
                    q_number = int(q_match.group(1))
                    
                    # Ch·ªâ xem x√©t c√¢u h·ªèi xu·∫•t hi·ªán tr∆∞·ªõc h√¨nh ·∫£nh
                    if q_position < img_position:
                        distance = img_position - q_position
                        if distance < min_distance:
                            min_distance = distance
                            closest_question = q_number
                
                # N·∫øu kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o tr∆∞·ªõc ƒë√≥, g√°n cho c√¢u h·ªèi ƒë·∫ßu ti√™n sau n√≥
                if closest_question is None and question_matches:
                    for q_match in question_matches:
                        q_position = q_match.start()
                        q_number = int(q_match.group(1))
                        if q_position > img_position:
                            closest_question = q_number
                            break
                
                if closest_question is not None:
                    self.image_positions[img_filename] = closest_question
                    st.info(f"üñºÔ∏è {img_filename} ƒë∆∞·ª£c √°nh x·∫° v·ªõi C√¢u {closest_question}")
                else:
                    self.image_positions[img_filename] = 1  # Fallback
                    self.warnings.append(f"Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ ch√≠nh x√°c cho {img_filename}, g√°n m·∫∑c ƒë·ªãnh cho c√¢u 1")
                    
        except Exception as e:
            self.warnings.append(f"L·ªói ph√¢n t√≠ch v·ªã tr√≠ h√¨nh ·∫£nh: {str(e)}")
    
    def _parse_questions_by_sections(self, text: str, html: str) -> List[Dict]:
        """Parse theo sections v·ªõi logic ƒë√£ s·ª≠a l·ªói"""
        questions = []
        lines = text.split('\n')
        
        # Bi·∫øn tr·∫°ng th√°i
        current_question_type = "multiple_choice"
        question_number = 0
        processing_question = False
        current_question_content = ""
        current_options = []
        current_correct_answers = []
        current_solution = ""
        processing_solution = False
        
        st.info(f"üîç ƒêang ph√¢n t√≠ch {len(lines)} d√≤ng vƒÉn b·∫£n...")
        
        for i, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue

            # X√°c ƒë·ªãnh c√°c "ranh gi·ªõi"
            is_new_question_boundary = self._is_question_start(line)
            is_new_section_boundary = line.startswith("Ph·∫ßn") or line.startswith("**Ph·∫ßn")

            # L∆∞u c√¢u h·ªèi hi·ªán t·∫°i tr∆∞·ªõc khi x·ª≠ l√Ω ranh gi·ªõi m·ªõi
            if is_new_question_boundary or is_new_section_boundary:
                if processing_question and question_number > 0:
                    self._save_current_question(
                        questions, question_number, current_question_type,
                        current_question_content, current_options,
                        current_correct_answers, current_solution.strip(), html
                    )
                    # Reset tr·∫°ng th√°i
                    processing_question = False
                    current_question_content = ""
                    current_options = []
                    current_correct_answers = []
                    current_solution = ""
                    processing_solution = False

            # 1. X·ª¨ L√ù PH·∫¶N M·ªöI
            if is_new_section_boundary:
                line_lower = line.lower()
                if any(keyword in line_lower for keyword in ["tr·∫Øc nghi·ªám ch·ªçn 1", "tr·∫Øc nghi·ªám 1", "ph·∫ßn 1", "ph·∫ßn i", "m·∫´u tr·∫Øc nghi·ªám"]):
                    current_question_type = "multiple_choice"
                    st.success(f"‚úÖ Ph√°t hi·ªán ph·∫ßn tr·∫Øc nghi·ªám: {line}")
                elif any(keyword in line_lower for keyword in ["ƒë√∫ng - sai", "ƒë√∫ng/sai", "ph·∫ßn 2", "ph·∫ßn ii", "m·∫´u ƒë√∫ng sai"]):
                    current_question_type = "true_false"
                    st.success(f"‚úÖ Ph√°t hi·ªán ph·∫ßn ƒë√∫ng/sai: {line}")
                elif any(keyword in line_lower for keyword in ["tr·∫£ l·ªùi ng·∫Øn", "ph·∫ßn 3", "ph·∫ßn iii", "m·∫´u tr·∫£ l·ªùi ng·∫Øn"]):
                    current_question_type = "short_answer"
                    st.success(f"‚úÖ Ph√°t hi·ªán ph·∫ßn tr·∫£ l·ªùi ng·∫Øn: {line}")
                elif any(keyword in line_lower for keyword in ["t·ª± lu·∫≠n", "ph·∫ßn 4", "ph·∫ßn iv", "m·∫´u t·ª± lu·∫≠n", "c√¢u h·ªèi t·ª± lu·∫≠n"]):
                    current_question_type = "essay"
                    st.success(f"‚úÖ Ph√°t hi·ªán ph·∫ßn t·ª± lu·∫≠n: {line}")
                continue

            # 2. B·∫ÆT ƒê·∫¶U C√ÇU H·ªéI M·ªöI
            if is_new_question_boundary:
                question_number = self._extract_question_number(line)
                if question_number > 0:
                    processing_question = True
                    current_question_content = self._extract_question_content(line, question_number)
                    st.info(f"üìù B·∫Øt ƒë·∫ßu c√¢u {question_number} (Lo·∫°i: {current_question_type})")
                continue

            # 3. X·ª¨ L√ù C√ÅC D√íNG B√äN TRONG C√ÇU H·ªéI
            if processing_question:
                if line.startswith("L·ªùi gi·∫£i") or line.startswith("**L·ªùi gi·∫£i"):
                    processing_solution = True
                    solution_part = re.sub(r'^\*\*?L·ªùi gi·∫£i\*\*?:?', '', line, flags=re.IGNORECASE).strip()
                    if solution_part:
                        current_solution += f" {solution_part}"
                    continue
                
                if processing_solution:
                    current_solution += f" {line}"
                    continue

                if self._is_option_line(line, current_question_type):
                    option_data = self._parse_option_line(line, current_question_type)
                    if option_data:
                        current_options.append(option_data['text'])
                        if option_data['is_correct']:
                            current_correct_answers.append(option_data['letter'])
                    continue
                
                elif line.startswith("ƒê√°p √°n:") and current_question_type == "short_answer":
                    answer = line.replace("ƒê√°p √°n:", "").strip()
                    current_correct_answers = [answer]
                    continue

                # ƒê·ªëi v·ªõi c√¢u t·ª± lu·∫≠n, kh√¥ng c·∫ßn x·ª≠ l√Ω ƒë√°p √°n v√¨ h·ªçc sinh n·ªôp b·∫±ng h√¨nh ·∫£nh
                # Ch·ªâ c·∫ßn l∆∞u n·ªôi dung c√¢u h·ªèi v√† l·ªùi gi·∫£i

                # N·ªôi dung c√¢u h·ªèi (cho c√¢u h·ªèi nhi·ªÅu d√≤ng)
                current_question_content += f" {line}"
        
        # L∆∞u c√¢u h·ªèi cu·ªëi c√πng
        if processing_question and question_number > 0:
            self._save_current_question(
                questions, question_number, current_question_type,
                current_question_content, current_options, 
                current_correct_answers, current_solution.strip(), html
            )
        
        return questions
    
    def _extract_question_number(self, line: str) -> int:
        """Tr√≠ch xu·∫•t s·ªë th·ª© t·ª± c√¢u h·ªèi"""
        patterns = [r'C√¢u\s+(\d+)\.', r'\*\*C√¢u\s+(\d+)\.\*\*']
        for pattern in patterns:
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                return int(match.group(1))
        self.warnings.append(f"Kh√¥ng th·ªÉ tr√≠ch xu·∫•t s·ªë c√¢u h·ªèi t·ª´: '{line[:50]}...'")
        return 0
    
    def _is_question_start(self, line: str) -> bool:
        """Ki·ªÉm tra xem c√≥ ph·∫£i b·∫Øt ƒë·∫ßu c√¢u h·ªèi kh√¥ng"""
        return bool(re.match(r'^(?:\*\*|)?C√¢u\s+\d+\.', line, re.IGNORECASE))
    
    def _extract_question_content(self, line: str, question_number: int) -> str:
        """Tr√≠ch xu·∫•t n·ªôi dung c√¢u h·ªèi"""
        content = re.sub(rf'^(?:\*\*|)?C√¢u\s+{question_number}\.', '', line, flags=re.IGNORECASE).strip()
        return content
    
    def _is_option_line(self, line: str, question_type: str) -> bool:
        """Ki·ªÉm tra xem c√≥ ph·∫£i d√≤ng option kh√¥ng"""
        if question_type == "multiple_choice":
            return bool(re.match(r'^#?[A-D]\.', line, re.IGNORECASE))
        elif question_type == "true_false":
            return bool(re.match(r'^#?[a-d]\)', line, re.IGNORECASE))
        return False
    
    def _parse_option_line(self, line: str, question_type: str) -> Dict:
        """Parse d√≤ng option"""
        is_correct = line.startswith('#')
        line_clean = line.lstrip('#').strip()
        
        pattern = r'^([A-Da-d])[\.\)](.+)'
        match = re.match(pattern, line_clean, re.IGNORECASE)
        if match:
            letter = match.group(1).upper() if question_type == 'multiple_choice' else match.group(1).lower()
            text = match.group(2).strip()
            return {
                'letter': letter,
                'text': self._clean_text(text),
                'is_correct': is_correct
            }
        return None
    
    def _clean_text(self, text: str) -> str:
        """L√†m s·∫°ch text LaTeX"""
        if not text: return ""
        text = re.sub(r'\s+', ' ', text).strip()
        return text
    
    def _get_image_for_question(self, question_num: int, html: str) -> str:
        """L·∫•y h√¨nh ·∫£nh cho c√¢u h·ªèi d·ª±a tr√™n √°nh x·∫° v·ªã tr√≠ ch√≠nh x√°c"""
        # T√¨m h√¨nh ·∫£nh ƒë∆∞·ª£c √°nh x·∫° cho c√¢u h·ªèi n√†y
        for img_key, mapped_question in self.image_positions.items():
            if mapped_question == question_num:
                return self.images[img_key]['data']
        
        # Fallback: kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh cho c√¢u n√†y
        return ""
    
    def _save_current_question(self, questions: List[Dict], question_number: int, 
                             question_type: str, content: str, options: List[str], 
                             correct_answers: List[str], solution: str, html: str):
        """L∆∞u c√¢u h·ªèi hi·ªán t·∫°i v√†o danh s√°ch v·ªõi √°nh x·∫° h√¨nh ·∫£nh ch√≠nh x√°c"""
        if not content.strip() or question_number <= 0:
            return
        
        image_base64 = self._get_image_for_question(question_number, html)
        
        question_data = {
            'type': question_type,
            'question_number': question_number,
            'question': self._clean_text(content),
            'image_base64': image_base64,
            'solution': self._clean_text(solution),
            'points': 1.0, 
            'difficulty': 'Trung b√¨nh'
        }

        if question_type == "multiple_choice":
            while len(options) < 4: options.append("")
            question_data.update({
                'option_a': options[0], 'option_b': options[1],
                'option_c': options[2], 'option_d': options[3],
                'correct_answer': correct_answers[0] if correct_answers else ""
            })
        
        elif question_type == "true_false":
            statements = [{'letter': chr(ord('a') + i), 'text': opt, 'is_correct': (chr(ord('a') + i) in correct_answers)} for i, opt in enumerate(options)]
            question_data.update({
                'statements': statements,
                'correct_answers': correct_answers,
                'points': len(statements) * 0.25
            })

        elif question_type == "short_answer":
            answer = correct_answers[0] if correct_answers else ""
            question_data.update({
                'correct_answer': self._clean_text(answer),
                'sample_answers': [self._clean_text(answer)] if answer else [],
                'case_sensitive': False
            })

        elif question_type == "essay":
            question_data.update({
                'points': 2.0,  # C√¢u t·ª± lu·∫≠n th∆∞·ªùng c√≥ ƒëi·ªÉm cao h∆°n
                'grading_criteria': 'Ch·∫•m b·∫±ng h√¨nh ·∫£nh do h·ªçc sinh n·ªôp',
                'submission_type': 'image_upload'
            })

        questions.append(question_data)
        self._add_to_raw_data(question_data)

    def _add_to_raw_data(self, question: Dict):
        """Th√™m c√¢u h·ªèi v√†o raw data cho b·∫£ng hi·ªÉn th·ªã"""
        q_num = question['question_number']
        q_type = question['type']
        
        common_data = {
            'STT': q_num,
            'C√¢u h·ªèi': question['question'][:100] + "...",
            'C√≥ h√¨nh ·∫£nh': '‚úÖ' if question['image_base64'] else '‚ùå',
            'ƒêi·ªÉm': question['points']
        }

        if q_type == 'multiple_choice':
            row = {
                'Lo·∫°i': 'üî§ Tr·∫Øc nghi·ªám',
                **common_data,
                'ƒê√°p √°n A': question['option_a'], 'ƒê√°p √°n B': question['option_b'],
                'ƒê√°p √°n C': question['option_c'], 'ƒê√°p √°n D': question['option_d'],
                'ƒê√°p √°n ƒë√∫ng': question['correct_answer'],
            }
        elif q_type == 'true_false':
            statements_text = "; ".join([f"{s['letter']}) {s['text'][:20]}..." for s in question['statements']])
            row = {
                'Lo·∫°i': '‚úÖ ƒê√∫ng/Sai',
                **common_data,
                'C√°c ph√°t bi·ªÉu': statements_text,
                'ƒê√°p √°n ƒë√∫ng': ", ".join(question['correct_answers'])
            }
        elif q_type == 'short_answer':
            row = {
                'Lo·∫°i': 'üìù Tr·∫£ l·ªùi ng·∫Øn',
                **common_data,
                'ƒê√°p √°n': question['correct_answer']
            }
        elif q_type == 'essay':
            row = {
                'Lo·∫°i': 'üìÑ T·ª± lu·∫≠n',
                **common_data,
                'Ki·ªÉu n·ªôp b√†i': 'H√¨nh ·∫£nh',
                'L·ªùi gi·∫£i c√≥': '‚úÖ' if question.get('solution') else '‚ùå'
            }
        else:
            row = {'STT': q_num, 'Lo·∫°i': 'Kh√¥ng x√°c ƒë·ªãnh', 'C√¢u h·ªèi': 'L·ªói ph√¢n t√≠ch'}
        
        self.raw_questions_data.append(row)

    def _create_questions_dataframe(self):
        """T·∫°o DataFrame ƒë·ªÉ hi·ªÉn th·ªã"""
        if not self.raw_questions_data:
            return pd.DataFrame()
        sorted_data = sorted(self.raw_questions_data, key=lambda x: x['STT'])
        return pd.DataFrame(sorted_data)

    def convert_to_exam_format(self, parsed_questions: List[Dict]) -> List[Dict]:
        """Chuy·ªÉn ƒë·ªïi sang ƒë·ªãnh d·∫°ng h·ªá th·ªëng exam"""
        converted_questions = []
        for q in parsed_questions:
            base_q = {
                'type': q['type'],
                'question': q['question'],
                'points': q.get('points', 1.0),
                'difficulty': q.get('difficulty', 'Trung b√¨nh'),
                'solution': q.get('solution', ''),
                'image_data': q.get('image_base64') or None
            }
            if q['type'] == 'multiple_choice':
                base_q.update({
                    'options': [q['option_a'], q['option_b'], q['option_c'], q['option_d']],
                    'correct_answer': q['correct_answer'],
                })
                converted_questions.append(base_q)
            elif q['type'] == 'true_false':
                for stmt in q['statements']:
                    true_false_q = base_q.copy()
                    true_false_q.update({
                        'question': f"{q['question']} - Ph√°t bi·ªÉu {stmt['letter']}): {stmt['text']}",
                        'correct_answer': 'ƒê√∫ng' if stmt['is_correct'] else 'Sai',
                        'points': q.get('points', 1.0) / len(q['statements'])
                    })
                    converted_questions.append(true_false_q)
            elif q['type'] == 'short_answer':
                base_q.update({
                    'sample_answers': q['sample_answers'],
                    'case_sensitive': q['case_sensitive']
                })
                converted_questions.append(base_q)
            elif q['type'] == 'essay':
                base_q.update({
                    'grading_criteria': q.get('grading_criteria', 'Ch·∫•m b·∫±ng h√¨nh ·∫£nh do h·ªçc sinh n·ªôp'),
                    'submission_type': q.get('submission_type', 'image_upload'),
                    'max_score': q.get('points', 2.0)
                })
                converted_questions.append(base_q)
        return converted_questions


def show_upload_word_exam():
    """Giao di·ªán upload v·ªõi logic parser chu·∫©n v√† √°nh x·∫° h√¨nh ·∫£nh ch√≠nh x√°c"""
    st.markdown(
    "<h4 style='font-size:18px;'>üìÑ Upload ƒë·ªÅ thi t·ª´ file Word</h4>", 
    unsafe_allow_html=True
)
    
    with st.expander("üìö H∆∞·ªõng d·∫´n ƒë·ªãnh d·∫°ng file Word", expanded=False):
        st.markdown("""
        ### üìù ƒê·ªãnh d·∫°ng chu·∫©n:
        
        **üéØ Ph√¢n chia theo ph·∫ßn ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi:**
        
        **Ph·∫ßn 1: Tr·∫Øc nghi·ªám**
        ```
        Ph·∫ßn 1: Tr·∫Øc nghi·ªám ch·ªçn 1 ƒë√°p √°n ƒë√∫ng
        
        C√¢u 1. N·ªôi dung c√¢u h·ªèi...
        A. ƒê√°p √°n A
        #B. ƒê√°p √°n B ƒë√∫ng (c√≥ d·∫•u # ·ªü ƒë·∫ßu)
        C. ƒê√°p √°n C
        D. ƒê√°p √°n D
        
        L·ªùi gi·∫£i
        Chi ti·∫øt l·ªùi gi·∫£i...
        ```
        
        **Ph·∫ßn 2: ƒê√∫ng/Sai**
        ```
        Ph·∫ßn 2: Tr·∫Øc nghi·ªám ƒë√∫ng - sai
        
        C√¢u 2. Cho c√°c ph√°t bi·ªÉu sau:
        #a) Ph√°t bi·ªÉu a ƒë√∫ng.
        b) Ph√°t bi·ªÉu b sai.
        c) Ph√°t bi·ªÉu c sai.
        #d) Ph√°t bi·ªÉu d ƒë√∫ng.
        
        L·ªùi gi·∫£i
        ...
        ```
        
        ### üîë L∆∞u √Ω quan tr·ªçng v·ªÅ h√¨nh ·∫£nh:
        - **V·ªã tr√≠ h√¨nh ·∫£nh:** ƒê·∫∑t h√¨nh ·∫£nh ngay sau c√¢u h·ªèi m√† n√≥ thu·ªôc v·ªÅ
        - **H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông √°nh x·∫°:** H√¨nh ·∫£nh v·ªõi c√¢u h·ªèi g·∫ßn nh·∫•t tr∆∞·ªõc n√≥
        - **Ki·ªÉm tra Debug Mode:** ƒê·ªÉ x√°c minh √°nh x·∫° h√¨nh ·∫£nh ƒë√∫ng
        """)
    
    uploaded_file = st.file_uploader(
        "Ch·ªçn file Word (.docx)", type=['docx'], key="word_uploader_main"
    )
    
    if uploaded_file is not None:
        parser = WordExamParser()
        
        with st.spinner("üîç ƒêang ph√¢n t√≠ch file Word, vui l√≤ng ch·ªù..."):
            result = parser.parse_docx_file(uploaded_file)
        
        if result['success']:
            st.success("üéâ Ph√¢n t√≠ch th√†nh c√¥ng!")
            
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("üìù T·ªïng c√¢u h·ªèi", result['total_questions'])
            col2.metric("üñºÔ∏è H√¨nh ·∫£nh", result['images_found'])
            col3.metric("‚ö†Ô∏è C·∫£nh b√°o", len(result['warnings']))
            col4.metric("‚ùå L·ªói", len(result['errors']))
            
            if result['raw_data']:
                st.subheader("üìä D·ªØ li·ªáu c√¢u h·ªèi ƒë√£ ph√¢n t√≠ch")
                df = parser._create_questions_dataframe()
                st.dataframe(df, use_container_width=True)
            
            if result['questions']:
                show_detailed_questions_preview(result['questions'], parser)
                
                st.divider()
                if st.button("üì• Import c√¢u h·ªèi v√†o ƒë·ªÅ thi", type="primary", use_container_width=True):
                    import_questions_to_exam(result['questions'], parser)
                    st.rerun()
            
            if result['warnings']:
                with st.expander("‚ö†Ô∏è Xem c·∫£nh b√°o", expanded=False):
                    for warning in result['warnings']: st.warning(f"‚Ä¢ {warning}")
            
            if result['errors']:
                with st.expander("‚ùå Xem l·ªói", expanded=True):
                    for error in result['errors']: st.error(f"‚Ä¢ {error}")
        
        else:
            st.error(f"‚ùå L·ªói nghi√™m tr·ªçng khi ph√¢n t√≠ch file: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")
            if result['errors']:
                for error in result['errors']: st.error(f"‚Ä¢ {error}")

def show_detailed_questions_preview(questions: List[Dict], parser: WordExamParser):
    """Hi·ªÉn th·ªã preview chi ti·∫øt v·ªõi UI chu·∫©n"""
    st.subheader("üëÄ Preview chi ti·∫øt c√¢u h·ªèi")
    
    for i, q in enumerate(questions):
        with st.expander(f"C√¢u {q['question_number']}: {q['question'][:60]}...", expanded=False):
            st.markdown(f"**üìù C√¢u h·ªèi:** {q['question']}")
            
            if q.get('image_base64'):
                st.write("üñºÔ∏è **H√¨nh ·∫£nh:**")
                try:
                    img_bytes = base64.b64decode(q['image_base64'])
                    st.image(Image.open(io.BytesIO(img_bytes)), width=400)
                except Exception as e:
                    st.error(f"L·ªói hi·ªÉn th·ªã h√¨nh ·∫£nh: {e}")
            
            if q['type'] == 'multiple_choice':
                st.write("**üî§ Lo·∫°i:** Tr·∫Øc nghi·ªám")
                options = [q['option_a'], q['option_b'], q['option_c'], q['option_d']]
                for j, option in enumerate(options):
                    letter = chr(65 + j)
                    if letter == q['correct_answer']:
                        st.success(f"‚úÖ **{letter}.** {option}")
                    else:
                        st.write(f"‚óØ **{letter}.** {option}")
            
            elif q['type'] == 'true_false':
                st.write("**‚úÖ Lo·∫°i:** ƒê√∫ng/Sai")
                for stmt in q['statements']:
                    if stmt['is_correct']:
                        st.success(f"‚úÖ **{stmt['letter']})** {stmt['text']} (ƒê√∫ng)")
                    else:
                        st.error(f"‚ùå **{stmt['letter']})** {stmt['text']} (Sai)")
            
            elif q['type'] == 'short_answer':
                st.write("**üìù Lo·∫°i:** Tr·∫£ l·ªùi ng·∫Øn")
                st.info(f"**ƒê√°p √°n m·∫´u:** {q['correct_answer']}")
            
            elif q['type'] == 'essay':
                st.write("**üìÑ Lo·∫°i:** T·ª± lu·∫≠n")
                st.info("**üí° Ph∆∞∆°ng th·ª©c:** H·ªçc sinh n·ªôp b√†i b·∫±ng h√¨nh ·∫£nh")
                st.caption("Gi√°o vi√™n s·∫Ω ch·∫•m ƒëi·ªÉm d·ª±a tr√™n h√¨nh ·∫£nh b√†i l√†m")
            
            if q.get('solution'):
                with st.popover("üí° Xem l·ªùi gi·∫£i"):
                    st.markdown(q['solution'])
            
            col1, col2 = st.columns(2)
            col1.caption(f"ƒêi·ªÉm: {q['points']}")
            col2.caption(f"ƒê·ªô kh√≥: {q['difficulty']}")

def import_questions_to_exam(questions: list, parser):
    """Import c√¢u h·ªèi v√†o session_state - S·ª¨A: Gi·ªØ nguy√™n c·∫•u tr√∫c ban ƒë·∫ßu"""
    try:
        # KH√îNG CHUY·ªÇN ƒê·ªîI - Gi·ªØ nguy√™n c·∫•u tr√∫c t·ª´ parser
        if "exam_questions" not in st.session_state:
            st.session_state.exam_questions = []
        
        # Import tr·ª±c ti·∫øp without conversion ƒë·ªÉ gi·ªØ nguy√™n c·∫•u tr√∫c
        imported_count = 0
        for q in questions:
            # ƒê·∫£m b·∫£o c√≥ c√°c tr∆∞·ªùng c·∫ßn thi·∫øt cho exam format
            exam_question = {
                'type': q['type'],
                'question': q['question'],
                'points': q.get('points', 1.0),
                'difficulty': q.get('difficulty', 'Trung b√¨nh'),
                'solution': q.get('solution', ''),
                'image_data': q.get('image_base64') or None  # ƒê·ªïi t√™n field
            }
            
            if q['type'] == 'multiple_choice':
                exam_question.update({
                    'options': [q['option_a'], q['option_b'], q['option_c'], q['option_d']],
                    'correct_answer': q['correct_answer']
                })
            elif q['type'] == 'true_false':
                # QUAN TR·ªåNG: Gi·ªØ nguy√™n c·∫•u tr√∫c statements
                exam_question.update({
                    'statements': q['statements'],
                    'correct_answers': q['correct_answers']
                })
            elif q['type'] == 'short_answer':
                exam_question.update({
                    'sample_answers': q.get('sample_answers', [q.get('correct_answer', '')]),
                    'case_sensitive': q.get('case_sensitive', False)
                })
            elif q['type'] == 'essay':
                exam_question.update({
                    'grading_criteria': q.get('grading_criteria', 'Ch·∫•m b·∫±ng h√¨nh ·∫£nh do h·ªçc sinh n·ªôp'),
                    'submission_type': q.get('submission_type', 'image_upload'),
                    'requires_image': True
                })
            
            st.session_state.exam_questions.append(exam_question)
            imported_count += 1
        
        st.success(f"‚úÖ ƒê√£ import th√†nh c√¥ng {imported_count} c√¢u h·ªèi v√†o ƒë·ªÅ thi!")
        st.info("üí° Chuy·ªÉn sang tab 'Qu·∫£n l√Ω' ƒë·ªÉ xem danh s√°ch c√¢u h·ªèi ƒë√£ import")
        
    except Exception as e:
        st.error(f"‚ùå L·ªói khi import: {str(e)}")
        st.code(str(e))  # Debug info

# H√†m render MathJax ƒë·ªÉ h·ªó tr·ª£ LaTeX
def render_mathjax():
    """Load MathJax ƒë·ªÉ hi·ªÉn th·ªã LaTeX"""
    mathjax_script = """
    <script>
    window.MathJax = {
      tex: {
        inlineMath: [['$', '$'], ['\\(', '\\)']],
        displayMath: [['$$', '$$'], ['\\[', '\\]']],
        processEscapes: true,
        processEnvironments: true
      },
      options: {
        skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre']
      }
    };
    </script>
    <script
      type="text/javascript"
      id="MathJax-script"
      async
      src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
    </script>
    """
    st.components.v1.html(mathjax_script, height=0)

# V√≠ d·ª• v·ªÅ c√°ch g·ªçi h√†m trong ·ª©ng d·ª•ng Streamlit ch√≠nh
if __name__ == '__main__':
    st.set_page_config(layout="wide", page_title="Word Exam Parser")
    st.title("Tr√¨nh ph√¢n t√≠ch ƒë·ªÅ thi t·ª´ file Word")
    render_mathjax()
    show_upload_word_exam()