import os
import streamlit as st
from typing import Optional

# Supabase imports
try:
    from supabase import create_client, Client
except ImportError:
    st.error("‚ùå Vui l√≤ng c√†i ƒë·∫∑t: pip install supabase")
    st.info("Ch·∫°y l·ªánh: `pip install supabase>=2.0.0`")
    st.stop()

class SupabaseConfig:
    """
    C·∫•u h√¨nh Supabase cho h·ªá th·ªëng thi tr·ª±c tuy·∫øn
    H·ªó tr·ª£ c·∫£ local development v√† cloud deployment
    """
    
    def __init__(self):
        # ∆Øu ti√™n Streamlit secrets (cho cloud), fallback v·ªÅ environment variables (cho local)
        self.supabase_url = self._get_config("SUPABASE_URL")
        self.supabase_key = self._get_config("SUPABASE_KEY")
        
        # Validate configuration
        if not self.supabase_url:
            self._show_config_error("SUPABASE_URL")
            
        if not self.supabase_key:
            self._show_config_error("SUPABASE_KEY")
    
    def _get_config(self, key: str) -> Optional[str]:
        """L·∫•y config t·ª´ Streamlit secrets ho·∫∑c environment variables"""
        # Th·ª≠ Streamlit secrets tr∆∞·ªõc (cho deployment)
        try:
            if hasattr(st, 'secrets') and key in st.secrets:
                return st.secrets[key]
        except:
            pass
        
        # Fallback v·ªÅ environment variables (cho local development)
        return os.getenv(key)
    
    def _show_config_error(self, missing_key: str):
        """Hi·ªÉn th·ªã l·ªói c·∫•u h√¨nh v·ªõi h∆∞·ªõng d·∫´n chi ti·∫øt"""
        st.error(f"‚ùå Thi·∫øu c·∫•u h√¨nh: {missing_key}")
        
        st.markdown("### üîß C√°ch kh·∫Øc ph·ª•c:")
        
        # H∆∞·ªõng d·∫´n cho local development
        with st.expander("üíª Ch·∫°y Local (Development)"):
            st.markdown("""
            **T·∫°o file `.env` trong th∆∞ m·ª•c g·ªëc:**
            ```env
            SUPABASE_URL=https://your-project.supabase.co
            SUPABASE_KEY=your-anon-key-here
            SUPABASE_SERVICE_KEY=your-service-role-key-here
            ```
            
            **Sau ƒë√≥ c√†i ƒë·∫∑t python-dotenv:**
            ```bash
            pip install python-dotenv
            ```
            """)
        
        # H∆∞·ªõng d·∫´n cho Streamlit Cloud
        with st.expander("‚òÅÔ∏è Deploy Streamlit Cloud"):
            st.markdown("""
            **Th√™m v√†o `.streamlit/secrets.toml`:**
            ```toml
            SUPABASE_URL = "https://your-project.supabase.co"
            SUPABASE_KEY = "your-anon-key-here"
            SUPABASE_SERVICE_KEY = "your-service-role-key-here"
            ```
            
            **Ho·∫∑c c·∫•u h√¨nh trong Streamlit Cloud Dashboard:**
            1. V√†o App settings
            2. Secrets tab
            3. Th√™m secrets theo format TOML
            """)
        
        # H∆∞·ªõng d·∫´n l·∫•y th√¥ng tin Supabase
        with st.expander("üìã L·∫•y th√¥ng tin Supabase"):
            st.markdown("""
            1. ƒêƒÉng nh·∫≠p v√†o [https://supabase.com](https://supabase.com)
            2. Ch·ªçn d·ª± √°n c·ªßa b·∫°n
            3. V√†o **Settings** ‚Üí **API**
            4. Copy **URL**, **anon/public key**, v√† **service_role key**
            5. D√°n v√†o c·∫•u h√¨nh theo h∆∞·ªõng d·∫´n tr√™n
            """)
        
        st.stop()
    
    def get_client(self) -> Client:
        """T·∫°o v√† tr·∫£ v·ªÅ Supabase client"""
        try:
            client = create_client(self.supabase_url, self.supabase_key)
            return client
        except Exception as e:
            st.error(f"‚ùå L·ªói k·∫øt n·ªëi Supabase: {str(e)}")
            st.info("Ki·ªÉm tra l·∫°i URL v√† KEY trong c·∫•u h√¨nh")
            st.stop()

# Global instance
_supabase_config = None

@st.cache_resource
def get_supabase_client() -> Client:
    """
    L·∫•y Supabase client ƒë∆∞·ª£c cache
    Function n√†y ƒë∆∞·ª£c cache ƒë·ªÉ tr√°nh t·∫°o nhi·ªÅu k·∫øt n·ªëi
    
    Returns:
        Client: Supabase client instance
    """
    global _supabase_config
    if _supabase_config is None:
        _supabase_config = SupabaseConfig()
    
    return _supabase_config.get_client()

# =======================================================
# =========== TH√äM H√ÄM M·ªöI V√ÄO ƒê√ÇY ======================
# =======================================================
@st.cache_resource
def get_supabase_admin_client() -> Client:
    """
    L·∫•y Supabase client v·ªõi quy·ªÅn admin (service_role key).
    D√πng cho c√°c t√°c v·ª• backend, b·ªè qua RLS.
    
    Returns:
        Client: Supabase client instance v·ªõi quy·ªÅn admin.
    """
    global _supabase_config
    if _supabase_config is None:
        _supabase_config = SupabaseConfig()

    # L·∫•y service key t·ª´ config
    service_key = _supabase_config._get_config("SUPABASE_SERVICE_KEY")

    if not service_key:
        _supabase_config._show_config_error("SUPABASE_SERVICE_KEY")

    # T·∫°o client v·ªõi service key
    try:
        admin_client = create_client(_supabase_config.supabase_url, service_key)
        return admin_client
    except Exception as e:
        st.error(f"‚ùå L·ªói k·∫øt n·ªëi Supabase v·ªõi quy·ªÅn Admin: {str(e)}")
        st.info("Ki·ªÉm tra l·∫°i SUPABASE_SERVICE_KEY trong c·∫•u h√¨nh c·ªßa b·∫°n.")
        st.stop()
# =======================================================
# =======================================================

def test_connection() -> bool:
    """
    Ki·ªÉm tra k·∫øt n·ªëi v·ªõi Supabase
    
    Returns:
        bool: True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        client = get_supabase_client()
        # Th·ª≠ query ƒë∆°n gi·∫£n ƒë·ªÉ test k·∫øt n·ªëi
        result = client.table('users').select('id').limit(1).execute()
        return True
    except Exception as e:
        st.error(f"‚ùå L·ªói test k·∫øt n·ªëi database: {str(e)}")
        
        # G·ª£i √Ω debug
        with st.expander("üîç Debug Info"):
            st.write("**L·ªói chi ti·∫øt:**", str(e))
            st.write("**C√≥ th·ªÉ do:**")
            st.write("- URL ho·∫∑c KEY kh√¥ng ƒë√∫ng")
            st.write("- B·∫£ng 'users' ch∆∞a ƒë∆∞·ª£c t·∫°o")
            st.write("- Quy·ªÅn truy c·∫≠p database b·ªã h·∫°n ch·∫ø")
            st.write("- K·∫øt n·ªëi m·∫°ng kh√¥ng ·ªïn ƒë·ªãnh")
        
        return False

def get_database_info() -> dict:
    """
    L·∫•y th√¥ng tin v·ªÅ database connection
    
    Returns:
        dict: Th√¥ng tin database
    """
    try:
        client = get_supabase_client()
        return {
            "url": client.supabase_url,
            "connected": True,
            "status": "‚úÖ K·∫øt n·ªëi th√†nh c√¥ng"
        }
    except Exception as e:
        return {
            "url": None,
            "connected": False,
            "status": f"‚ùå L·ªói: {str(e)}"
        }

# Load environment variables n·∫øu ch·∫°y local
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # python-dotenv kh√¥ng b·∫Øt bu·ªôc, ch·ªâ c·∫ßn cho local development
    pass