import streamlit as st
from datetime import datetime
from database.supabase_models import get_database
from auth.login import get_current_user

def show_my_classes():
    """Hi·ªÉn th·ªã danh s√°ch l·ªõp h·ªçc c·ªßa h·ªçc sinh (phi√™n b·∫£n ƒë√£ s·ª≠a l·ªói)."""
    st.header("üìö L·ªõp h·ªçc c·ªßa t√¥i")
    
    user = get_current_user()
    db = get_database()
    
    try:
        classes = db.get_classes_by_student(user['id'])
        
        if not classes:
            st.info("üìö B·∫°n ch∆∞a tham gia l·ªõp h·ªçc n√†o!")
            # (Ph·∫ßn form tham gia l·ªõp gi·ªØ nguy√™n)
            return
        
        for class_info in classes:
            with st.container():
                col1, col2 = st.columns([3, 1])
                with col1:
                    st.markdown(f"### üìö {class_info['ten_lop']}")
                    st.write(f"**M√£ l·ªõp:** {class_info['ma_lop']}")
                    # **D√íNG ƒê√É X√ìA:** Kh√¥ng c√≤n hi·ªÉn th·ªã t√™n gi√°o vi√™n
                    if class_info.get('mo_ta'):
                        st.caption(class_info['mo_ta'])
                
                with col2:
                    st.write("") # Th√™m kho·∫£ng tr·ªëng cho ƒë·∫πp
                    if st.button("üìù Xem ƒë·ªÅ thi", key=f"view_exams_{class_info['id']}", use_container_width=True):
                        st.session_state.selected_class_id = class_info['id']
                        st.session_state.current_page = "take_exam"
                        st.rerun()
                st.divider()
        
        
        with st.expander("‚ûï Tham gia l·ªõp h·ªçc kh√°c"):
            with st.form("join_another_class_form"):
                ma_lop = st.text_input("M√£ l·ªõp m·ªõi", placeholder="Nh·∫≠p m√£ l·ªõp")
                if st.form_submit_button("üìù Tham gia", use_container_width=True):
                    if ma_lop.strip():
                        join_class_by_code(user['id'], ma_lop.strip())
                    else:
                        st.error("‚ùå Vui l√≤ng nh·∫≠p m√£ l·ªõp!")
    except Exception as e:
        st.error(f"‚ùå L·ªói l·∫•y danh s√°ch l·ªõp: {str(e)}")

def join_class_by_code(student_id: str, ma_lop: str):
    """Tham gia l·ªõp b·∫±ng m√£ l·ªõp"""
    db = get_database()
    try:
        class_info = db.get_class_by_code(ma_lop) # Gi·∫£ s·ª≠ b·∫°n c√≥ h√†m n√†y
        if not class_info:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp v·ªõi m√£ n√†y!")
            return
        
        # L·ªúI G·ªåI ƒê√É ƒê∆Ø·ª¢C S·ª¨A TH√ÄNH get_classes_by_student
        existing_classes = db.get_classes_by_student(student_id)
        if any(c['id'] == class_info['id'] for c in existing_classes):
            st.warning("‚ö†Ô∏è B·∫°n ƒë√£ tham gia l·ªõp n√†y r·ªìi!")
            return
        
        if db.add_student_to_class(class_info['id'], student_id):
            st.success(f"‚úÖ ƒê√£ tham gia l·ªõp {class_info['ten_lop']} th√†nh c√¥ng!")
            st.rerun()
        else:
            st.error("‚ùå L·ªói khi tham gia l·ªõp!")
    except Exception as e:
        st.error(f"‚ùå L·ªói: {str(e)}")

def get_class_exam_count(class_id: str) -> int:
    """L·∫•y s·ªë l∆∞·ª£ng ƒë·ªÅ thi trong l·ªõp"""
    db = get_database()
    try:
        result = db.client.table('exams').select('id', count='exact').eq('class_id', class_id).eq('is_published', True).execute()
        return result.count or 0
    except:
        return 0